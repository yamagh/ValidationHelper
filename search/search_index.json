{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ValidationHelper \u00b6 What does this component do? \u00b6 This component is validator to verify entity in OutSystems. If you use this component, you can validate without implement logic of validations. Detailed description \u00b6 When storing an entity in a database, it is important in the system to verify that the data it has is correct. The timing of validation may be client-side, business logic, just before persisting in the database, etc., but this component allows you to manage many validations in one place.","title":"Home"},{"location":"#validationhelper","text":"","title":"ValidationHelper"},{"location":"#what-does-this-component-do","text":"This component is validator to verify entity in OutSystems. If you use this component, you can validate without implement logic of validations.","title":"What does this component do?"},{"location":"#detailed-description","text":"When storing an entity in a database, it is important in the system to verify that the data it has is correct. The timing of validation may be client-side, business logic, just before persisting in the database, etc., but this component allows you to manage many validations in one place.","title":"Detailed description"},{"location":"Contribution/contribution/","text":"Thank you very much for your interest in this component!! If you want to contribute to this component, you can do it in the following ways: Please rate this component here . \ud83d\udc4d I would appreciate it if you could comment on it. \ud83d\udc4d I'm not used to English. Please let me know if there is something strange. \ud83d\udc4d I would appreciate it if you could donate a little so that I can continue to contribute to the community. \ud83d\udc4d Thank you for reading to the end of this page. Happy development!","title":"Contribution"},{"location":"Getting-started/Installation/","text":"Getting started \u00b6 I will briefly explain how to use \"ValidationHelper\". There is nothing difficult. It's very easy. Installation \u00b6 First of all, start ServiceStudio. Then open Forge from the tabs on the top left. Then enter validation to search. You will see it in the search results as follows: When you open the details page of ValidationHelper , you should see an \"INSTALL\" button. Let's click. You may have to wait a few seconds to check for dependencies. Click \"INSTALL\" again and you're done. Warning If a warning appears on the screen, please read the notice carefully and deal with it.","title":"Installation"},{"location":"Getting-started/Installation/#getting-started","text":"I will briefly explain how to use \"ValidationHelper\". There is nothing difficult. It's very easy.","title":"Getting started"},{"location":"Getting-started/Installation/#installation","text":"First of all, start ServiceStudio. Then open Forge from the tabs on the top left. Then enter validation to search. You will see it in the search results as follows: When you open the details page of ValidationHelper , you should see an \"INSTALL\" button. Let's click. You may have to wait a few seconds to check for dependencies. Click \"INSTALL\" again and you're done. Warning If a warning appears on the screen, please read the notice carefully and deal with it.","title":"Installation"},{"location":"Getting-started/Tutorial/","text":"Tutorial \u00b6 Hello, Thank you for opening this page. This tutorial will show you how to use \"ValidationHelper\" through the simplest use case. Tutorial Steps: Create the app and entity for this tutorial Define validation rules in this app. Call verification action where you want to verify. 1. Create the app and entity for this tutorial \u00b6 The first step is to create an application for this tutorial. Then open the module and create the following Employee entity. Employee Entity Attribute Name Data Type Is AutoNumber Length Default Value Id Integer Yes - FirstName Text - 50 LastName Text - 50 Email Email - 250 JobPosition Text - 50 IsActive Boolean - - True Once the entity is created, publish it. Then consider what validation we will do when we save to this entity. In this case, we will validate the following. Attribute Name Validation we want to do Id FirstName Must have at least two letters. LastName Must have at least two letters. Email Must be in a valid form as an email address / Be unique JobPosition Must contain one of the words \"Developer,\" \"Manager,\" or \"CEO\". IsActive 2. Define validation rules in this app \u00b6 Open the ValidationHelper app (https://<YOUR_SERVER>/ValidationHelper/). Then, the entity search screen is displayed, so search for the entity for which you want to define validation rules. In this case, we want to define a validation rule for the \"Employee\" entity in the \"Tutorial\" application, so we search for it in the \"Tutorial\" application and click on \"Employee\". After opening the detail screen, we will define a validation rule for each attribute. Set them up as shown in the table below. Do not forget to press the \"Save\" button at the end. Attribute Name Validation Rule Type Rule Type Value FirstName Length RUle min 2 LastName Length RUle min 2 Email Format Rule with [0-9a-zA-Z.]+@mycompany.com Email Uniqueness Rule - IsActive JobPosition Element Rule inclusion \"Developer Manager CEO\" 3. Call verification action where you want to verify \u00b6 Return to ServiceStudio and add a references to ValidationHelper in the Tutorial app. Next, create a screen using ServiceStudio's scaffolding function. Next, add validation to the save button process. The SaveDetail action before adding the process looks like this. Add the process as shown in the image below. The IsValidEntity action is an action in the \"ValidationHelper\" module. Set the parameters as follows. EntityObject: ToObject(GetEmployeeById.List.Current.Employee) IsOccurException: True If IsOccurException is set to True , an exception will be thrown if the validation does not pass. Therefore, add an ExceptionHandler to add processing to display the error message. Use Message_Warning in the ValidationHelper module to display error messages. After this stage of implementation is complete, publish the file. Then, let's run it. When I opened the screen and clicked the save button, error messages appeared. It is working as per the validation rules we defined. You can also customize error messages, which are not covered in this tutorial. Next, enter the content that does not cause error messages and click the Save button. Saved successfully without error. Then, it moved to the list screen. The error messages was displayed as a feedback message, but we would like to change it to be displayed under each widget. First, change IsOccurException to False in the IsValidEntity action. Then add a process to set an error message to each widget in case of a validation error, as shown in the image below. // Examples: Input_FirstName.Valid = HasError(IsValidEntity.ErrorList, \"FirstName\").IsValid Input_FirstName.ValidationMessage = HasError(IsValidEntity.ErrorList, \"FirstName\").ErrorMessage When you have finished modifying the implementation, publish and run it. You should see error messages under each widget. The IsValidEntity we have used so far has two actions, one for the client side and one for the server side. The client-side action uses only on-screen data for validation. On the other hand, server-side actions can also validate using off-screen data. For example, in the case of uniqueness verification, all records in the database are referenced to ensure that the data being stored is unique. Since the implementation up to this point has used client-side actions, the next step is to use server-side actions. Let's add processing in the EmployeeCreateOrUpdate action! Add IsValidEntity for server side in the EmployeeCreateOrUpdate action. Set the parameters as follows. EntityObject: ToObject(Source) IsOccurException: True After implementation is complete, publish and run the application. A new save is performed by specifying the same e-mail address as the one just registered. The correct error message is displayed. That's all for this tutorial! Using the ValidationHelper, we were able to define validation rules declaratively and implement them concisely. In addition to the validation rules presented in this tutorial, there are other validations that can be used. See Reference for more information.","title":"Tutorial"},{"location":"Getting-started/Tutorial/#tutorial","text":"Hello, Thank you for opening this page. This tutorial will show you how to use \"ValidationHelper\" through the simplest use case. Tutorial Steps: Create the app and entity for this tutorial Define validation rules in this app. Call verification action where you want to verify.","title":"Tutorial"},{"location":"Getting-started/Tutorial/#1-create-the-app-and-entity-for-this-tutorial","text":"The first step is to create an application for this tutorial. Then open the module and create the following Employee entity. Employee Entity Attribute Name Data Type Is AutoNumber Length Default Value Id Integer Yes - FirstName Text - 50 LastName Text - 50 Email Email - 250 JobPosition Text - 50 IsActive Boolean - - True Once the entity is created, publish it. Then consider what validation we will do when we save to this entity. In this case, we will validate the following. Attribute Name Validation we want to do Id FirstName Must have at least two letters. LastName Must have at least two letters. Email Must be in a valid form as an email address / Be unique JobPosition Must contain one of the words \"Developer,\" \"Manager,\" or \"CEO\". IsActive","title":"1. Create the app and entity for this tutorial"},{"location":"Getting-started/Tutorial/#2-define-validation-rules-in-this-app","text":"Open the ValidationHelper app (https://<YOUR_SERVER>/ValidationHelper/). Then, the entity search screen is displayed, so search for the entity for which you want to define validation rules. In this case, we want to define a validation rule for the \"Employee\" entity in the \"Tutorial\" application, so we search for it in the \"Tutorial\" application and click on \"Employee\". After opening the detail screen, we will define a validation rule for each attribute. Set them up as shown in the table below. Do not forget to press the \"Save\" button at the end. Attribute Name Validation Rule Type Rule Type Value FirstName Length RUle min 2 LastName Length RUle min 2 Email Format Rule with [0-9a-zA-Z.]+@mycompany.com Email Uniqueness Rule - IsActive JobPosition Element Rule inclusion \"Developer Manager CEO\"","title":"2. Define validation rules in this app"},{"location":"Getting-started/Tutorial/#3-call-verification-action-where-you-want-to-verify","text":"Return to ServiceStudio and add a references to ValidationHelper in the Tutorial app. Next, create a screen using ServiceStudio's scaffolding function. Next, add validation to the save button process. The SaveDetail action before adding the process looks like this. Add the process as shown in the image below. The IsValidEntity action is an action in the \"ValidationHelper\" module. Set the parameters as follows. EntityObject: ToObject(GetEmployeeById.List.Current.Employee) IsOccurException: True If IsOccurException is set to True , an exception will be thrown if the validation does not pass. Therefore, add an ExceptionHandler to add processing to display the error message. Use Message_Warning in the ValidationHelper module to display error messages. After this stage of implementation is complete, publish the file. Then, let's run it. When I opened the screen and clicked the save button, error messages appeared. It is working as per the validation rules we defined. You can also customize error messages, which are not covered in this tutorial. Next, enter the content that does not cause error messages and click the Save button. Saved successfully without error. Then, it moved to the list screen. The error messages was displayed as a feedback message, but we would like to change it to be displayed under each widget. First, change IsOccurException to False in the IsValidEntity action. Then add a process to set an error message to each widget in case of a validation error, as shown in the image below. // Examples: Input_FirstName.Valid = HasError(IsValidEntity.ErrorList, \"FirstName\").IsValid Input_FirstName.ValidationMessage = HasError(IsValidEntity.ErrorList, \"FirstName\").ErrorMessage When you have finished modifying the implementation, publish and run it. You should see error messages under each widget. The IsValidEntity we have used so far has two actions, one for the client side and one for the server side. The client-side action uses only on-screen data for validation. On the other hand, server-side actions can also validate using off-screen data. For example, in the case of uniqueness verification, all records in the database are referenced to ensure that the data being stored is unique. Since the implementation up to this point has used client-side actions, the next step is to use server-side actions. Let's add processing in the EmployeeCreateOrUpdate action! Add IsValidEntity for server side in the EmployeeCreateOrUpdate action. Set the parameters as follows. EntityObject: ToObject(Source) IsOccurException: True After implementation is complete, publish and run the application. A new save is performed by specifying the same e-mail address as the one just registered. The correct error message is displayed. That's all for this tutorial! Using the ValidationHelper, we were able to define validation rules declaratively and implement them concisely. In addition to the validation rules presented in this tutorial, there are other validations that can be used. See Reference for more information.","title":"3. Call verification action where you want to verify"},{"location":"Getting-started/Tutorial_old/","text":"Tutorial \u00b6 Hello, Thank you for opening this page. This tutorial will show you how to use \"ValidationHelper\" through the simplest use case. There are two things to do. Define validation rules in this app. Call validation action where you want to verify. For example, there is the following entity. Micropost entity has three attributes. Id attribute is identifier of this entity. Content attribute has text that length is less than or equal to 140. UserId attribute has ServiceCenter/User.Id . All three attributes are mandatory. In validation, I would like to confirm the following two points. Content has text that length 1~140. User of UserId is exist. Now let's get started. 1. Define validation rules in this app \u00b6 First of all, open the ValidationHelper app (https://<YOUR_SERVER>/ValidationHelper/). Then, the entity search screen is displayed, so search for the entity for which you want to set validation rules. This time I want to define a validation rule for the \"Micropost\" entity, so search for \"Micropost\". Open the details page for \"Micropost\" entity. This page shows the attributes that \"Micropost\" entity has and provides links to add a validation rule to each attribute. I have set the validation rules as follows: Content: Min = 1, Max = 140 UserId: Presence 2. Call validation action where you want to verify \u00b6 Open the screen I want to verify in Service Studio. (The screen below was created by scaffolding.) Open the action you want to validate. This time I would like to validate with the Save button. The processing of the Save button is as follows. Validation must be done before saving to the database. So this time I will validate before CreateOrUpdateMicropost . \"ValidationHelper\" provides an action named VH_IsValidEntity for validation, so add this action before CreateOrUpdateMicropost . Using VH_IsValidEntity is very easy and you specify two parameters. Parameter 1 : EntityObject Specify the variable to be validated. The data type of the variable must be an entity. Variables also need to be converted to object types using the \"ToObject\" function. In this case, specify ToObject (MicropostForm.Record.Micropost) . Parameter 2 : IsOccurException If you specify True , an exception will occur when validation fails. The exception that occurs here is caught by the handler in this screen action and a feedback message is displayed. The error message is formatted just right for display in a feedback message. That's all for how to use it. Let's check the execution result. Execution Result \u00b6 Open the details screen of \"Micropost\" and enter 141 characters in \"Content\". Nothing is specified for \"UserId\". When I clicked the \"Save\" button, verification was performed and two errors occurred. Now empty the content, set User to \"Administrator\" and click Save. It has been verified as expected. That's all for the tutorial. There are other types of validation available with \"ValidationHelper\" besides those used in this tutorial. See Reference for more information.","title":"Tutorial"},{"location":"Getting-started/Tutorial_old/#tutorial","text":"Hello, Thank you for opening this page. This tutorial will show you how to use \"ValidationHelper\" through the simplest use case. There are two things to do. Define validation rules in this app. Call validation action where you want to verify. For example, there is the following entity. Micropost entity has three attributes. Id attribute is identifier of this entity. Content attribute has text that length is less than or equal to 140. UserId attribute has ServiceCenter/User.Id . All three attributes are mandatory. In validation, I would like to confirm the following two points. Content has text that length 1~140. User of UserId is exist. Now let's get started.","title":"Tutorial"},{"location":"Getting-started/Tutorial_old/#1-define-validation-rules-in-this-app","text":"First of all, open the ValidationHelper app (https://<YOUR_SERVER>/ValidationHelper/). Then, the entity search screen is displayed, so search for the entity for which you want to set validation rules. This time I want to define a validation rule for the \"Micropost\" entity, so search for \"Micropost\". Open the details page for \"Micropost\" entity. This page shows the attributes that \"Micropost\" entity has and provides links to add a validation rule to each attribute. I have set the validation rules as follows: Content: Min = 1, Max = 140 UserId: Presence","title":"1. Define validation rules in this app"},{"location":"Getting-started/Tutorial_old/#2-call-validation-action-where-you-want-to-verify","text":"Open the screen I want to verify in Service Studio. (The screen below was created by scaffolding.) Open the action you want to validate. This time I would like to validate with the Save button. The processing of the Save button is as follows. Validation must be done before saving to the database. So this time I will validate before CreateOrUpdateMicropost . \"ValidationHelper\" provides an action named VH_IsValidEntity for validation, so add this action before CreateOrUpdateMicropost . Using VH_IsValidEntity is very easy and you specify two parameters. Parameter 1 : EntityObject Specify the variable to be validated. The data type of the variable must be an entity. Variables also need to be converted to object types using the \"ToObject\" function. In this case, specify ToObject (MicropostForm.Record.Micropost) . Parameter 2 : IsOccurException If you specify True , an exception will occur when validation fails. The exception that occurs here is caught by the handler in this screen action and a feedback message is displayed. The error message is formatted just right for display in a feedback message. That's all for how to use it. Let's check the execution result.","title":"2. Call validation action where you want to verify"},{"location":"Getting-started/Tutorial_old/#execution-result","text":"Open the details screen of \"Micropost\" and enter 141 characters in \"Content\". Nothing is specified for \"UserId\". When I clicked the \"Save\" button, verification was performed and two errors occurred. Now empty the content, set User to \"Administrator\" and click Save. It has been verified as expected. That's all for the tutorial. There are other types of validation available with \"ValidationHelper\" besides those used in this tutorial. See Reference for more information.","title":"Execution Result"},{"location":"Reading-material/why-need-this/","text":"Why need this solution? \u00b6 Usual Validation Methods \u00b6 If you don't yet know the usual validation methods in OutSystems, the following resources may help. Document Validate the fields of a form - success.outsystems.com Video The usual way to validate with OutSystems is to implement the logic as follows: You can set the properties of the widget to check the required items and the number of characters. However, there are not many validations that can be set in the widget properties. In addition, processing that does not involve a screen may be required, so logic implementation is required anyway. Issues \u00b6 I think there are some issues with this verification method. For example, if you want to use the implemented validation logic in other actions, you will create a common action based on the existing validation logic. The created common action is used for the original action and the newly required action. This means that a small refactoring is needed. Also, if you now want to validate in the actions of another module, you may create a common module to keep the dependencies between the modules correct. You need to pay attention to the relationship between the modules. These are a bit of a hassle. In addition, there is no way to share client-side and server-side validation. Why need this solution ? \u00b6 This solution should help you solve the problems mentioned above. I hope it helps projects that are aware of the same issue.","title":"Why need this"},{"location":"Reading-material/why-need-this/#why-need-this-solution","text":"","title":"Why need this solution?"},{"location":"Reading-material/why-need-this/#usual-validation-methods","text":"If you don't yet know the usual validation methods in OutSystems, the following resources may help. Document Validate the fields of a form - success.outsystems.com Video The usual way to validate with OutSystems is to implement the logic as follows: You can set the properties of the widget to check the required items and the number of characters. However, there are not many validations that can be set in the widget properties. In addition, processing that does not involve a screen may be required, so logic implementation is required anyway.","title":"Usual Validation Methods"},{"location":"Reading-material/why-need-this/#issues","text":"I think there are some issues with this verification method. For example, if you want to use the implemented validation logic in other actions, you will create a common action based on the existing validation logic. The created common action is used for the original action and the newly required action. This means that a small refactoring is needed. Also, if you now want to validate in the actions of another module, you may create a common module to keep the dependencies between the modules correct. You need to pay attention to the relationship between the modules. These are a bit of a hassle. In addition, there is no way to share client-side and server-side validation.","title":"Issues"},{"location":"Reading-material/why-need-this/#why-need-this-solution_1","text":"This solution should help you solve the problems mentioned above. I hope it helps projects that are aware of the same issue.","title":"Why need this solution ?"},{"location":"Reference/Element/","text":"Element \u00b6 Verify the elements contained in the text. Parameters \u00b6 ElementTypeId Specify inclustion / exclusion List List of words used for verification Delimiters Delimiter used in the List Message Custom error message Method of verification \u00b6 Inclusion \u00b6 Verify that the text contains any words. You can specify multiple words to confirm that they are included, separated by spaces. Default error message: ${attr} is not included in the list Exclusion \u00b6 Verify that the text does not contain any words. You can specify multiple words to confirm that they are included, separated by spaces. Default error message: ${attr} is reserved","title":"Element"},{"location":"Reference/Element/#element","text":"Verify the elements contained in the text.","title":"Element"},{"location":"Reference/Element/#parameters","text":"ElementTypeId Specify inclustion / exclusion List List of words used for verification Delimiters Delimiter used in the List Message Custom error message","title":"Parameters"},{"location":"Reference/Element/#method-of-verification","text":"","title":"Method of verification"},{"location":"Reference/Element/#inclusion","text":"Verify that the text contains any words. You can specify multiple words to confirm that they are included, separated by spaces. Default error message: ${attr} is not included in the list","title":"Inclusion"},{"location":"Reference/Element/#exclusion","text":"Verify that the text does not contain any words. You can specify multiple words to confirm that they are included, separated by spaces. Default error message: ${attr} is reserved","title":"Exclusion"},{"location":"Reference/Existence/","text":"Existence \u00b6 Verify the existence of the value. Parameters \u00b6 ExistenceTypeId Specify presence / absence Message Custom error message Method of verification \u00b6 Presence \u00b6 Verify that the value exists. The existing values are: The value is not equal to the default value for that data type. If the data type of the value is a foreign key, the value exists in the referenced entity. Default error message: ${attr} must be present Absence \u00b6 Verify that the value does not exist. The non-existent values are: The value is equal to the default value for that data type. If the data type of the value is a foreign key, the value does not exist in the referenced entity. Default error message: ${attr} must be absent","title":"Existence"},{"location":"Reference/Existence/#existence","text":"Verify the existence of the value.","title":"Existence"},{"location":"Reference/Existence/#parameters","text":"ExistenceTypeId Specify presence / absence Message Custom error message","title":"Parameters"},{"location":"Reference/Existence/#method-of-verification","text":"","title":"Method of verification"},{"location":"Reference/Existence/#presence","text":"Verify that the value exists. The existing values are: The value is not equal to the default value for that data type. If the data type of the value is a foreign key, the value exists in the referenced entity. Default error message: ${attr} must be present","title":"Presence"},{"location":"Reference/Existence/#absence","text":"Verify that the value does not exist. The non-existent values are: The value is equal to the default value for that data type. If the data type of the value is a foreign key, the value does not exist in the referenced entity. Default error message: ${attr} must be absent","title":"Absence"},{"location":"Reference/Format/","text":"Format \u00b6 Verify text format with regular expressions. Use OutSystems' Text API/Regex_Search for regular expression matching. Parameters \u00b6 FormatTypeId Specify with / without g Pattern Regular expression pattern used in validation IgnoreCase IgnoreCase option to use with regular expressions MultiLine Multiline option to use with regular expressions SingleLine SingleLine option to use with regular expressions Message Custom error message Method of verification \u00b6 With \u00b6 Verify that it matches the text format. Default error message: ${attr} is invalid. Without \u00b6 Verify that it does not match the text format. Default error message: ${attr} is invalid.","title":"Format"},{"location":"Reference/Format/#format","text":"Verify text format with regular expressions. Use OutSystems' Text API/Regex_Search for regular expression matching.","title":"Format"},{"location":"Reference/Format/#parameters","text":"FormatTypeId Specify with / without g Pattern Regular expression pattern used in validation IgnoreCase IgnoreCase option to use with regular expressions MultiLine Multiline option to use with regular expressions SingleLine SingleLine option to use with regular expressions Message Custom error message","title":"Parameters"},{"location":"Reference/Format/#method-of-verification","text":"","title":"Method of verification"},{"location":"Reference/Format/#with","text":"Verify that it matches the text format. Default error message: ${attr} is invalid.","title":"With"},{"location":"Reference/Format/#without","text":"Verify that it does not match the text format. Default error message: ${attr} is invalid.","title":"Without"},{"location":"Reference/Length/","text":"Length \u00b6 Verify the length of the text. Parameters \u00b6 LengthTypeId Specify min / max Number Threshold used for verification Message Custom error message Method of verification \u00b6 Min \u00b6 Verify that the text length is not below the minimum. Default error message : ${attr} is too short (minimum is ${count} characters) Max \u00b6 Verify that the text length does not exceed the minimum. Default error message: ${attr} is too long (maximum is ${count} characters)","title":"Length"},{"location":"Reference/Length/#length","text":"Verify the length of the text.","title":"Length"},{"location":"Reference/Length/#parameters","text":"LengthTypeId Specify min / max Number Threshold used for verification Message Custom error message","title":"Parameters"},{"location":"Reference/Length/#method-of-verification","text":"","title":"Method of verification"},{"location":"Reference/Length/#min","text":"Verify that the text length is not below the minimum. Default error message : ${attr} is too short (minimum is ${count} characters)","title":"Min"},{"location":"Reference/Length/#max","text":"Verify that the text length does not exceed the minimum. Default error message: ${attr} is too long (maximum is ${count} characters)","title":"Max"},{"location":"Reference/Numecarity/","text":"Numecarity \u00b6 Verify numericality. Parameters \u00b6 NumecarityTypeId Specify odd / even / equal_to / less_than / less_than_or_equal_to / greater_than / greater_than_or_equal_to Number Threshold used for verification Message Custom error message Method of verification \u00b6 Odd \u00b6 Verify that the value is odd. Default error message: ${attr} must be odd Even \u00b6 Verify that the value is even. Default error message: ${attr} must be even Equal to \u00b6 Verify that the value is equal to any value. Default error message: ${attr} must be equal to ${count} Less than \u00b6 Verify that the value is less than any value. Default error message: ${attr} must be less than ${count} Less than or equal to \u00b6 Verify that the value is less than or equal to any value. Default error message: ${attr} must be less than or equal to ${count} Greater than \u00b6 Verify that the value exceeds any value. Default error message: ${attr} must be greater than ${count} Greater than or equal than \u00b6 Verify that the value is equal to or exceeds any value. Default error message: ${attr} must be greater than or equal to ${count}","title":"Numecarity"},{"location":"Reference/Numecarity/#numecarity","text":"Verify numericality.","title":"Numecarity"},{"location":"Reference/Numecarity/#parameters","text":"NumecarityTypeId Specify odd / even / equal_to / less_than / less_than_or_equal_to / greater_than / greater_than_or_equal_to Number Threshold used for verification Message Custom error message","title":"Parameters"},{"location":"Reference/Numecarity/#method-of-verification","text":"","title":"Method of verification"},{"location":"Reference/Numecarity/#odd","text":"Verify that the value is odd. Default error message: ${attr} must be odd","title":"Odd"},{"location":"Reference/Numecarity/#even","text":"Verify that the value is even. Default error message: ${attr} must be even","title":"Even"},{"location":"Reference/Numecarity/#equal-to","text":"Verify that the value is equal to any value. Default error message: ${attr} must be equal to ${count}","title":"Equal to"},{"location":"Reference/Numecarity/#less-than","text":"Verify that the value is less than any value. Default error message: ${attr} must be less than ${count}","title":"Less than"},{"location":"Reference/Numecarity/#less-than-or-equal-to","text":"Verify that the value is less than or equal to any value. Default error message: ${attr} must be less than or equal to ${count}","title":"Less than or equal to"},{"location":"Reference/Numecarity/#greater-than","text":"Verify that the value exceeds any value. Default error message: ${attr} must be greater than ${count}","title":"Greater than"},{"location":"Reference/Numecarity/#greater-than-or-equal-than","text":"Verify that the value is equal to or exceeds any value. Default error message: ${attr} must be greater than or equal to ${count}","title":"Greater than or equal than"},{"location":"Reference/Uniqueness/","text":"Uniqueness \u00b6 Verify that the element is unique among the attributes of the specified entity. Parameters \u00b6 Scope (Option) Other attributes used to determine uniqueness constraints. When specifying multiple attributes, specify a space-separated list. If not specified, it validates that it is unique among all records of the corresponding attribute. It is not case sensitive. Message (Option) Custom error message Default error message: ${attr} has already been taken. Remarks This validation rule does not create a unique constraint on the database. Therefore, it is possible that two database connections happen to create two records with the same value in an attribute that should be unique. To avoid this, you need to create a unique index on that attribute of the database. Examples \u00b6 Example #1 \u00b6 The validation will pass under the following conditions. There is no record in Fig. 1 that matches \"Year\" and \"Num\". Fig.1 - Data at the time of validation \u00b6 Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar True Fig.2 - Target record to be verified \u00b6 Id Year Num Content IsActive 3 2022 2 Baz True Uniqueness rule for \"Num\" \u00b6 Scope = \"Year\" Example #2 \u00b6 The validation will not pass under the following conditions. There is a record in Fig. 3 whose \"Year\" and \"Num\" match. Fig.3 - Data at the time of validation \u00b6 Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar True Fig.4 - Target record to be verified \u00b6 Id Year Num Content IsActive 3 2022 1 Baz True Uniqueness rule for \"Num\" \u00b6 Scope = \"Year\" Example #3 \u00b6 The validation will pass under the following conditions. There is no record in Fig. 5 that matches \"Year\", \"IsActive\", and \"Num\". Fig.5 - Data at the time of validation \u00b6 Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar False Fig.6 - Target record to be verified \u00b6 Id Year Num Content IsActive 3 2022 1 Baz True Uniqueness rule for \"Num\" \u00b6 Scope = \"Year IsActive\" Example #4 \u00b6 The validation will pass under the following conditions Record with the same Id (primary key) are ignored. Fig.7 - Data at the time of validation \u00b6 Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar True Fig.8 - Target record to be verified \u00b6 Id Year Num Content IsActive 2 2022 1 Qux True Uniqueness rule for \"Num\" \u00b6 Scope = \"Year\"","title":"Uniqueness"},{"location":"Reference/Uniqueness/#uniqueness","text":"Verify that the element is unique among the attributes of the specified entity.","title":"Uniqueness"},{"location":"Reference/Uniqueness/#parameters","text":"Scope (Option) Other attributes used to determine uniqueness constraints. When specifying multiple attributes, specify a space-separated list. If not specified, it validates that it is unique among all records of the corresponding attribute. It is not case sensitive. Message (Option) Custom error message Default error message: ${attr} has already been taken. Remarks This validation rule does not create a unique constraint on the database. Therefore, it is possible that two database connections happen to create two records with the same value in an attribute that should be unique. To avoid this, you need to create a unique index on that attribute of the database.","title":"Parameters"},{"location":"Reference/Uniqueness/#examples","text":"","title":"Examples"},{"location":"Reference/Uniqueness/#example-1","text":"The validation will pass under the following conditions. There is no record in Fig. 1 that matches \"Year\" and \"Num\".","title":"Example #1"},{"location":"Reference/Uniqueness/#fig1-data-at-the-time-of-validation","text":"Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar True","title":"Fig.1 - Data at the time of validation"},{"location":"Reference/Uniqueness/#fig2-target-record-to-be-verified","text":"Id Year Num Content IsActive 3 2022 2 Baz True","title":"Fig.2 - Target record to be verified"},{"location":"Reference/Uniqueness/#uniqueness-rule-for-num","text":"Scope = \"Year\"","title":"Uniqueness rule for \"Num\""},{"location":"Reference/Uniqueness/#example-2","text":"The validation will not pass under the following conditions. There is a record in Fig. 3 whose \"Year\" and \"Num\" match.","title":"Example #2"},{"location":"Reference/Uniqueness/#fig3-data-at-the-time-of-validation","text":"Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar True","title":"Fig.3 - Data at the time of validation"},{"location":"Reference/Uniqueness/#fig4-target-record-to-be-verified","text":"Id Year Num Content IsActive 3 2022 1 Baz True","title":"Fig.4 - Target record to be verified"},{"location":"Reference/Uniqueness/#uniqueness-rule-for-num_1","text":"Scope = \"Year\"","title":"Uniqueness rule for \"Num\""},{"location":"Reference/Uniqueness/#example-3","text":"The validation will pass under the following conditions. There is no record in Fig. 5 that matches \"Year\", \"IsActive\", and \"Num\".","title":"Example #3"},{"location":"Reference/Uniqueness/#fig5-data-at-the-time-of-validation","text":"Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar False","title":"Fig.5 - Data at the time of validation"},{"location":"Reference/Uniqueness/#fig6-target-record-to-be-verified","text":"Id Year Num Content IsActive 3 2022 1 Baz True","title":"Fig.6 - Target record to be verified"},{"location":"Reference/Uniqueness/#uniqueness-rule-for-num_2","text":"Scope = \"Year IsActive\"","title":"Uniqueness rule for \"Num\""},{"location":"Reference/Uniqueness/#example-4","text":"The validation will pass under the following conditions Record with the same Id (primary key) are ignored.","title":"Example #4"},{"location":"Reference/Uniqueness/#fig7-data-at-the-time-of-validation","text":"Id Year Num Content IsActive 1 2021 1 Foo True 2 2022 1 Bar True","title":"Fig.7 - Data at the time of validation"},{"location":"Reference/Uniqueness/#fig8-target-record-to-be-verified","text":"Id Year Num Content IsActive 2 2022 1 Qux True","title":"Fig.8 - Target record to be verified"},{"location":"Reference/Uniqueness/#uniqueness-rule-for-num_3","text":"Scope = \"Year\"","title":"Uniqueness rule for \"Num\""},{"location":"Reference/actions/","text":"Server Actions \u00b6 IsValidEntity \u00b6 Validate entity based on Validation Rules. Parameters \u00b6 Object EntityObject (Mandatory) Specify the Entity object to be validated. To specify an Entity object, use the ToObject function. Example: ToObject(GetFooById.List.Current.Foo) Boolean IsOccurException (Mandatory) If True, an exception is raised if the validation does not pass. Structure ErrorFormat Format of the error message if IsOccurException is True and the validation did not pass. Text Prefix - Prefix to be given to error messages if they do not pass validation. - Default Value: `\"${ErrorCount} Validation Error(s).<ul>\"` - Avalidable Placeholders: - `${ErrorCount}`: Number of total errors. Text Detail - If the validation does not pass, the format of the error message details. - Default Value: `\"<li>${ErrorMessage}</li>\"` - Avalidable Placeholders: - `${ErrorMessage}` - Details for one validation error. - ex) \"FooBar is too short (minimum is 10 characters)\" - `${AttrName}` - Name of the attribute that caused the validation error - ex) \"FirstName\" Text DetailSeparator - Separator for each error detail. - Default Value: `\"\"` Text Suffix - Suffix error messages. - Default Value: `\"</ul>\"` Boolean IsValid True if validation is passed. List ErrorList (AttrName, Message) If the validation did not pass, a list of details of the error. With an error message for each attribute. HasError \u00b6 Returns the error message for the specified attribute in ErrorList ( IsValidEntity Action's output). Parameters \u00b6 Structure ErrorList (AttrName, Message) (Mandatory) IsValidEntity Action's output. Structure AttrName (Mandatory) Attribute name to be retrieved from ErrorList. Ignore case. Structure Out (IsValid, Message) IsValid is False if AttrName is in ErrorList . Client Actions \u00b6 IsValidEntity \u00b6 Validate entity based on Validation Rules. Parameters \u00b6 Object EntityObject (Mandatory) See IsValidEntity in Server Action Boolean IsOccurException (Mandatory) See IsValidEntity in Server Action Structure ErrorFormat See IsValidEntity in Server Action Integer CacheInMinutes Time to cache the validation rules. If the cache becomes invalid, the validation rule is re-fetched from the server. Default Value: 1440 Boolean IsValid See IsValidEntity in Server Action List ErrorList (AttrName, Message) See IsValidEntity in Server Action HasError \u00b6 Returns the error message for the specified attribute in ErrorList ( IsValidEntity Action's output). Parameters \u00b6 Structure ErrorList (AttrName, Message) (Mandatory) See HasError in Server Action Text AttrName (Mandatory) Attribute name to be retrieved from ErrorList. Ignore case. If you do not want to hardcode attribute names, you can use the NameOf action. Structure Out (IsValid, Message) See HasError in Server Action NameOf \u00b6 Get the name of the object. Note: This action is experimental Parameters \u00b6 Object Object (Mandatory) Specify the object for which you want to get a name. Examples: ToObject(GetFooById.List.Current.Foo.Bar) # Output = bar ToObject(GetFooById.List.Current.Foo) # Output = foo ToObject(GetFooById.List.Current) # Output = Current ToObject(GetFooById.List[1]) # Output = List[1] ToObject(Foo.Bar) # Output = bar ToObject(Foo) # Output = foo Text Name Object Name Message \u00b6 Wrapper for FeedbackMessage API in OutSystems' standard JavaScript API. The error message returned by default by the IsValidEntity action contains HTML <br> and <ul> tags, but you must use this Message action with the input parameter encodeHTML set to False in order to correctly display this error message in your feedback message. Parameters \u00b6 Text message (Mandatory) Text messageType (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory) Message_Error \u00b6 Shortcut for error messages. Parameters \u00b6 Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory) Message_Info \u00b6 Shortcut for info messages. Parameters \u00b6 Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory) Message_Success \u00b6 Shortcut for success messages. Parameters \u00b6 Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory) Message_Warning \u00b6 Shortcut for warning messages. Parameters \u00b6 Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory)","title":"Actions"},{"location":"Reference/actions/#server-actions","text":"","title":"Server Actions"},{"location":"Reference/actions/#isvalidentity","text":"Validate entity based on Validation Rules.","title":"IsValidEntity"},{"location":"Reference/actions/#parameters","text":"Object EntityObject (Mandatory) Specify the Entity object to be validated. To specify an Entity object, use the ToObject function. Example: ToObject(GetFooById.List.Current.Foo) Boolean IsOccurException (Mandatory) If True, an exception is raised if the validation does not pass. Structure ErrorFormat Format of the error message if IsOccurException is True and the validation did not pass. Text Prefix - Prefix to be given to error messages if they do not pass validation. - Default Value: `\"${ErrorCount} Validation Error(s).<ul>\"` - Avalidable Placeholders: - `${ErrorCount}`: Number of total errors. Text Detail - If the validation does not pass, the format of the error message details. - Default Value: `\"<li>${ErrorMessage}</li>\"` - Avalidable Placeholders: - `${ErrorMessage}` - Details for one validation error. - ex) \"FooBar is too short (minimum is 10 characters)\" - `${AttrName}` - Name of the attribute that caused the validation error - ex) \"FirstName\" Text DetailSeparator - Separator for each error detail. - Default Value: `\"\"` Text Suffix - Suffix error messages. - Default Value: `\"</ul>\"` Boolean IsValid True if validation is passed. List ErrorList (AttrName, Message) If the validation did not pass, a list of details of the error. With an error message for each attribute.","title":"Parameters"},{"location":"Reference/actions/#haserror","text":"Returns the error message for the specified attribute in ErrorList ( IsValidEntity Action's output).","title":"HasError"},{"location":"Reference/actions/#parameters_1","text":"Structure ErrorList (AttrName, Message) (Mandatory) IsValidEntity Action's output. Structure AttrName (Mandatory) Attribute name to be retrieved from ErrorList. Ignore case. Structure Out (IsValid, Message) IsValid is False if AttrName is in ErrorList .","title":"Parameters"},{"location":"Reference/actions/#client-actions","text":"","title":"Client Actions"},{"location":"Reference/actions/#isvalidentity_1","text":"Validate entity based on Validation Rules.","title":"IsValidEntity"},{"location":"Reference/actions/#parameters_2","text":"Object EntityObject (Mandatory) See IsValidEntity in Server Action Boolean IsOccurException (Mandatory) See IsValidEntity in Server Action Structure ErrorFormat See IsValidEntity in Server Action Integer CacheInMinutes Time to cache the validation rules. If the cache becomes invalid, the validation rule is re-fetched from the server. Default Value: 1440 Boolean IsValid See IsValidEntity in Server Action List ErrorList (AttrName, Message) See IsValidEntity in Server Action","title":"Parameters"},{"location":"Reference/actions/#haserror_1","text":"Returns the error message for the specified attribute in ErrorList ( IsValidEntity Action's output).","title":"HasError"},{"location":"Reference/actions/#parameters_3","text":"Structure ErrorList (AttrName, Message) (Mandatory) See HasError in Server Action Text AttrName (Mandatory) Attribute name to be retrieved from ErrorList. Ignore case. If you do not want to hardcode attribute names, you can use the NameOf action. Structure Out (IsValid, Message) See HasError in Server Action","title":"Parameters"},{"location":"Reference/actions/#nameof","text":"Get the name of the object. Note: This action is experimental","title":"NameOf"},{"location":"Reference/actions/#parameters_4","text":"Object Object (Mandatory) Specify the object for which you want to get a name. Examples: ToObject(GetFooById.List.Current.Foo.Bar) # Output = bar ToObject(GetFooById.List.Current.Foo) # Output = foo ToObject(GetFooById.List.Current) # Output = Current ToObject(GetFooById.List[1]) # Output = List[1] ToObject(Foo.Bar) # Output = bar ToObject(Foo) # Output = foo Text Name Object Name","title":"Parameters"},{"location":"Reference/actions/#message","text":"Wrapper for FeedbackMessage API in OutSystems' standard JavaScript API. The error message returned by default by the IsValidEntity action contains HTML <br> and <ul> tags, but you must use this Message action with the input parameter encodeHTML set to False in order to correctly display this error message in your feedback message.","title":"Message"},{"location":"Reference/actions/#parameters_5","text":"Text message (Mandatory) Text messageType (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory)","title":"Parameters"},{"location":"Reference/actions/#message_error","text":"Shortcut for error messages.","title":"Message_Error"},{"location":"Reference/actions/#parameters_6","text":"Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory)","title":"Parameters"},{"location":"Reference/actions/#message_info","text":"Shortcut for info messages.","title":"Message_Info"},{"location":"Reference/actions/#parameters_7","text":"Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory)","title":"Parameters"},{"location":"Reference/actions/#message_success","text":"Shortcut for success messages.","title":"Message_Success"},{"location":"Reference/actions/#parameters_8","text":"Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory)","title":"Parameters"},{"location":"Reference/actions/#message_warning","text":"Shortcut for warning messages.","title":"Message_Warning"},{"location":"Reference/actions/#parameters_9","text":"Text message (Mandatory) Text encodeHTML (Mandatory) Text extraCssClasses (Mandatory) Text closeOnClick (Mandatory) Text onClick (Mandatory)","title":"Parameters"},{"location":"Reference/validation-types/","text":"You can define validation rules from the following types of validation methods: Element: Inclusion, Exclusion Existence: Presence, Absence Format: With, Without Length: Min, Max Numecarity: Odd, Even, Equal to, Less than, Less thaan or equal to, Greater than, Greater than or equal to Uniqueness You can define all types of validation for attributes of all data types. When validating, the data is implicitly transformed and then validated, depending on the type of validation. Note This component is used for the implicit conversion. See this component if you want to know more about the conversion. We recommend that you use a validation method that matches your data type to avoid unexpected implicit conversion results.","title":"Validation Types"}]}